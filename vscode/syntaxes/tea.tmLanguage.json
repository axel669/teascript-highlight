{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "TeaScript",
    "scopeName": "source.tea",
    "patterns": [
        {
            "include": "#expr"
        }
    ],
    "repository": {
        "expr": {
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#arrow"
                },
                {
                    "include": "#function"
                },
                {
                    "include": "#object"
                },
                {
                    "include": "#array"
                },
                {
                    "include": "#parens"
                },
                {
                    "include": "#comprehension"
                },
                {
                    "include": "#constants"
                },
                {
                    "include": "#named-arg"
                },
                {
                    "include": "#words"
                }
            ]
        },
        "arg-list": {
            "name": "keyword",
            "begin": "\\s*args\\s+(\\{)",
            "beginCaptures": {
                "1": {
                    "name": "text.html"
                }
            },
            "end": "(\\})",
            "endCaptures": {
                "1": {
                    "name": "text.html"
                }
            },
            "patterns": [
                {
                    "include": "#arg-name"
                }
            ]
        },
        "arg-name": {
            "patterns": [
                {
                    "name": "variable.parameter",
                    "begin": "([a-zA-Z][a-zA-Z0-9_\\$]*\\s+)?\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#arg-name"
                        }
                    ]
                },
                {
                    "name": "variable.parameter",
                    "match": "[a-zA-Z][a-zA-Z0-9_\\$]*"
                }
            ]
        },
        "argument": {
            "patterns": [
                {
                    "name": "variable.parameter",
                    "match": "@[a-zA-Z\\$][a-zA-Z0-9_\\$]*"
                }
            ]
        },
        "array": {
            "name": "text.array",
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                {
                    "include": "#expr"
                }
            ]
        },
        "arrow": {
            "name": "keyword",
            "match": "=>"
        },
        "code-block": {
            "patterns": [
                {
                    "name": "text.code-block",
                    "begin": "\\{",
                    "end": "(?=\\})",
                    "patterns": [
                        {
                            "include": "#expr"
                        }
                    ]
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "name": "comment.line",
                    "begin": "###",
                    "end": "###",
                    "contentName": "comment.line"
                },
                {
                    "name": "comment.line",
                    "begin": "#",
                    "end": "(?=$)",
                    "contentName": "comment.line"
                }
            ]
        },
        "comprehension": {
            "match": "(from)\\s+([a-zA-Z][a-zA-Z0-9_\\$]*)\\s+:",
            "captures": {
                "1": {
                    "name": "entity.name.function"
                },
                "2": {
                    "name": "variable.parameter"
                }
            }
        },
        "constants": {
            "name": "constant.language",
            "match": "\\b(true|false|null|void)\\b"
        },
        "function": {
            "patterns": [
                {
                    "name": "keyword",
                    "contentName": "text.html",
                    "begin": "(async\\s+)?fn\\*?\\s+([a-zA-Z\\$][a-zA-Z0-9_\\$]*\\s+)?(\\{)",
                    "beginCaptures": {
                        "2": {
                            "name": "entity.name.function"
                        },
                        "3": {
                            "name": "text.html"
                        }
                    },
                    "end": "(\\})",
                    "endCaptures": {
                        "1": {
                            "name": "text.html"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#argument"
                        },
                        {
                            "include": "#expr"
                        }
                    ]
                },
                {
                    "name": "keyword",
                    "contentName": "text.html",
                    "match": "(async\\s+)?fn\\*?((\\{)([a-zA-Z\\$][a-zA-Z0-9_\\$]*)(,\\s*[a-zA-Z\\$][a-zA-Z0-9_\\$]*)*(\\}))?",
                    "captures": {
                        "2": {
                            "name": "constant.language"
                        },
                        "3": {
                            "name": "text.html"
                        },
                        "6": {
                            "name": "text.html"
                        }
                    }
                },
                {
                    "name": "keyword",
                    "contentName": "text.html",
                    "begin": "(async\\s+)?fn\\*?\\s+([a-zA-Z][a-zA-Z0-9_\\$]*)\\s+(?==>)",
                    "beginCaptures": {
                        "2": {
                            "name": "variable.parameter"
                        }
                    },
                    "end": "(?=$)",
                    "patterns": [
                        {
                            "include": "#expr"
                        }
                    ]
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "keyword",
                    "match": "=>|return"
                },
                {
                    "name": "keyword",
                    "begin": "(for(\\s+(ever|await)?)|\\@catch|if|safeguard(\\^)?|guard)",
                    "end": "(\\})",
                    "contentName": "text.html",
                    "endCaptures": {
                        "1": {
                            "name": "text.html"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code-block"
                        },
                        {
                            "include": "#expr"
                        }
                    ]
                },
                {
                    "name": "keyword",
                    "begin": "(\\@finally|try)",
                    "end": "(\\})",
                    "contentName": "text.html",
                    "endCaptures": {
                        "1": {
                            "name": "text.html"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#code-block"
                        }
                    ]
                },
                {
                    "name": "keyword",
                    "begin": "export\\s+(\\{)",
                    "end": "\\}",
                    "beginCaptures": {
                        "1": {
                            "name": "text.html"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "text.html"
                        }
                    },
                    "contentName": "text.export-block",
                    "patterns": [
                        {
                            "include": "#keyword-export-entry"
                        }
                    ]
                },
                {
                    "name": "keyword",
                    "match": "^export (default )?",
                    "captures": {
                        "1": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "name": "keyword",
                    "match": "\\b(yield|await|let|mut)\\b"
                },
                {
                    "name": "keyword",
                    "match": "^\\s*import\\s+([^\\s]+)\\s(from)",
                    "captures": {
                        "1": {
                            "name": "variable.parameter constant.language"
                        }
                    }
                }
            ]
        },
        "keyword-export-entry": {
            "patterns": [
                {
                    "name": "text.export-block",
                    "match": "([a-zA-Z\\$][a-zA-Z0-9_\\$]*)\\s+(as)\\s+([a-zA-Z\\$][a-zA-Z0-9_\\$]*)",
                    "captures": {
                        "1": {
                            "name": "entity.name.tag"
                        },
                        "2": {
                            "name": "entity.name.function"
                        },
                        "3": {
                            "name": "variable.parameter"
                        }
                    }
                },
                {
                    "name": "variable.parameter",
                    "match": "[a-zA-Z\\$][a-zA-Z0-9_\\$]*"
                }
            ]
        },
        "named-arg": {
            "name": "variable.parameter",
            "match": ":[a-zA-Z][a-zA-Z0-9_\\$]*"
        },
        "number": {
            "name": "constant.numeric",
            "match": "\\d+(\\.\\d+)?((e|E)(\\+|\\-)?\\d+)?"
        },
        "object": {
            "begin": "\\{",
            "end": "\\}",
            "name": "text.html",
            "patterns": [
                {
                    "include": "#object-key"
                },
                {
                    "include": "#expr"
                }
            ]
        },
        "object-key": {
            "patterns": [
                {
                    "name": "variable.parameter",
                    "begin": ":\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#expr"
                        }
                    ]
                },
                {
                    "name": "variable.parameter",
                    "begin": ":",
                    "end": "\\s",
                    "patterns": [
                        {
                            "include": "#expr"
                        }
                    ]
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "name": "entity.name.function",
                    "match": "(\\.\\.\\.|<<<|>>>|<<|>>|<\\-|&|\\*|%|=|<|>|\\-|\\+|\\/|\\||\\!|\\~)"
                },
                {
                    "name": "entity.name.function",
                    "begin": "(await|typeof|delete)\\{",
                    "end": "\\}",
                    "contentName": "text.html",
                    "patterns": [
                        {
                            "include": "#expr"
                        }
                    ]
                },
                {
                    "name": "entity.name.function",
                    "begin": "instance<",
                    "end": ">",
                    "contentName": "text.html",
                    "patterns": [
                        {
                            "include": "#expr"
                        }
                    ]
                }
            ]
        },
        "parens": {
            "name": "text.html",
            "begin": "(?<=\\s)\\(",
            "end": "\\)",
            "patterns": [
                {
                    "include": "#expr"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "name": "string.template",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "include": "#string-interpolation"
                        },
                        {
                            "include": "#string-escapes"
                        }
                    ]
                }
            ]
        },
        "string-escapes": {
            "name": "constant.character.escape",
            "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|#)"
        },
        "string-interpolation": {
            "begin": "#\\{",
            "beginCaptures": {
                "0": {
                    "name": "constant.character.escape"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "constant.character.escape"
                }
            },
            "end": "\\}",
            "contentName": "meta.embedded.line",
            "patterns": [
                {
                    "include": "#expr"
                }
            ]
        },
        "template": {
            "patterns": [
                {
                    "name": "string.template.js",
                    "begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.tagged-template.js"
                        },
                        "2": {
                            "name": "punctuation.definition.string.template.begin.js"
                        }
                    },
                    "end": "`",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.template.end.js"
                        }
                    },
                    "patterns": []
                }
            ]
        },
        "words": {
            "patterns": [
                {
                    "name": "entity.name.tag",
                    "match": "[a-zA-Z\\$][a-zA-Z0-9_\\$]*"
                },
                {
                    "name": "entity.name.function",
                    "match": "\\??(\\.)[a-zA-Z\\$][a-zA-Z0-9_\\$]*\\??(?=\\()",
                    "captures": {
                        "1": {
                            "name": "text.normal"
                        }
                    }
                },
                {
                    "name": "support.variable.property",
                    "match": "\\??(\\.)[a-zA-Z\\$][a-zA-Z0-9_\\$]*",
                    "captures": {
                        "1": {
                            "name": "text.normal"
                        }
                    }
                }
            ]
        }
    }
}
